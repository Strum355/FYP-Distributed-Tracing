/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package xyz.noahsc.topology

import io.ktor.application.Application
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.gson.gson
import io.ktor.http.ContentType
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.get
import io.ktor.routing.routing
import io.ktor.server.cio.CIO
import io.ktor.server.engine.embeddedServer
import io.ktor.util.KtorExperimentalAPI
import mbuhot.eskotlin.query.compound.bool
import mbuhot.eskotlin.query.term.term
import mbuhot.eskotlin.query.term.range
import org.elasticsearch.index.query.TermQueryBuilder
import org.elasticsearch.client.RestClient
import org.elasticsearch.client.RestHighLevelClient
import org.apache.http.HttpHost

data class Driver(val id: Int, val firstName: String, val lastName: String, val nationality: String)

@UseExperimental(KtorExperimentalAPI::class)
fun main(args: Array<String>) {
    val server = embeddedServer(CIO, 8080, module = Application::module)
    server.start(wait = true)
}

fun Application.module() {
    install(ContentNegotiation) {
        gson {
            setPrettyPrinting()
        }
    }
    routing {
       get("/drivers"){
           val lowLevel = RestClient.builder(HttpHost("localhost", 9200))
           val client = RestHighLevelClient(lowLevel)
           val query = bool { 
                must {
                    bool {
                        should = listOf(
                            term { "Ticket" to "banana" },
                            term { "TicketState" to "deleted" }
                        )
                    }
                }
                filter {
                    range { 
                        "CreatedAt" {
                            lte = "now-30d/d"      
                        }
                    }
                }
            }
           call.respond(query.toString())
       }
    }
}