version: '3.7'
services: 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: fyp-elasticsearch
    user: 1000:1000
    volumes: 
      - ./data:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
    ulimits: # some OSs need this
      nofile:
        soft: 122880
        hard: 122880
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.es.rule=Host(`es.localhost`)"
      - "traefik.http.services.es.loadbalancer.server.port=9200"     
    depends_on: 
      - traefik

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fyp-jaeger
    restart: on-failure
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
    ports:
      - 16686:16686
      - 14268:14268
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"      
    depends_on: 
      - elasticsearch
      - traefik
      - kibana

  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.0
    container_name: fyp-kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    depends_on: 
      - traefik
    
  backend:
    build:
      target: dev # Remove this line for "production" build
      context: ./backend
    container_name: fyp-backend
    volumes: 
      - ./backend:/topology
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.topology.rule=Host(`backend.localhost`)"
      - "traefik.http.services.topology.loadbalancer.server.port=8080"
    depends_on: 
      - traefik
      - elasticsearch

  traefik:
    image: traefik:2.0.7
    container_name: fyp-traefik
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: 
      - --entrypoints.web.address=:80
      - --providers.docker.exposedByDefault=false
      - --providers.docker=true
      - --api.insecure
    ports:
      - 80:80
      - 8080:8080

  example1:
    build:
      context: ./trace_step
      dockerfile: microservices/exmpl1/Dockerfile
    container_name: fyp-example1
    network_mode: "host"
    
  example2:
    build:
      context: ./trace_step
      dockerfile: microservices/exmpl2/Dockerfile
    container_name: fyp-example2
    network_mode: "host"

  example3:
    build:
      context: ./trace_step
      dockerfile: microservices/exmpl3/Dockerfile
    container_name: fyp-example3
    network_mode: "host"

  example4:
    build:
      context: ./trace_step
      dockerfile: microservices/exmpl4/Dockerfile
    container_name: fyp-example4
    network_mode: "host"   