/*
* This Kotlin source file was generated by the Gradle 'init' task.
*/
package xyz.noahsc.topology

import io.ktor.application.Application
import io.ktor.application.ApplicationStopped
import io.ktor.application.ApplicationStarting
import io.ktor.features.DefaultHeaders
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.gson.gson
import io.ktor.http.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.response.respondTextWriter
import io.ktor.request.receive
import io.ktor.routing.get
import io.ktor.routing.post
import io.ktor.routing.routing
import io.ktor.server.cio.CIO
import io.ktor.server.engine.embeddedServer
import io.ktor.util.KtorExperimentalAPI
import com.google.gson.Gson
import org.slf4j.LoggerFactory
import com.apurebase.kgraphql.KGraphQL
import xyz.noahsc.topology.data.*
import xyz.noahsc.topology.repository.*
import com.google.gson.*

@UseExperimental(KtorExperimentalAPI::class)
fun main(args: Array<String>) {
    val server = embeddedServer(CIO, 8080, watchPaths = listOf("topology"), module = Application::module)
    server.start(wait = true)
}

fun Application.module() {
    val traceDataRepository = TraceDataRepositoryFactory.create()
    
    environment.monitor.subscribe(ApplicationStopped) { traceDataRepository.close() }
    install(DefaultHeaders)
    install(CallLogging)
    install(ContentNegotiation) {
        gson {
            setPrettyPrinting()
        }
    }


    val schema = KGraphQL.schema { 
        configure { 
            useDefaultPrettyPrinter = true
        }

        query("findTrace") { 
            resolver { traceID: String ->
                traceDataRepository.getTraceByID(traceID)
            }.withArgs { 
                arg<String> { name = "traceID"}
            }
        }

        type<Span> {
            property<StackTrace>("stacktrace") { 
                resolver { span: Span ->
                    StackTrace.fromSpan(span)
                }
            }
            property<List<LogPoint>?>("logs") {
                resolver { span: Span, eventType: String? ->
                    if(eventType == null) {
                        return@resolver span.logs
                    }
                    span.logs?.filter { 
                        it.fields.any { 
                            fieldEl: LogPointField -> fieldEl.key == "event" && fieldEl.value == eventType 
                        } 
                    }
                }
            }
        }
    }

    
    routing {
        post("/graphql") {
            try {
                val body = call.receive<GraphQLBody>()
                val resp = schema.execute(body.query, Gson().toJson(body.variables))
                call.respond(resp)
            } catch(e: HttpStatusException) {
                call.respondTextWriter(ContentType("application", "json"), e.statusCode) { }
            }
        }
    }
}